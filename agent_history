## 2024-05-12
- Reviewed drag behaviour for node marbles. Child nodes were realigned by the parent's automatic layout after pointer release, which snapped them back to their default orbit.
- Added a `manualPosition` flag to `NodeBase` instances so that once a node is dragged it retains its dropped coordinates. Automatic layout now skips nodes flagged as manually positioned while still arranging the remaining nodes.
- No automated tests are present in the project; behaviour verified by code inspection only. Future iterations should consider adding interaction tests for drag-and-drop flows if the runtime environment allows.

## 2024-05-13
- Linking UI was non-functional: clicking a node's link icon did not create connections and no relationship handles rendered.
- Added a shared node registry plus link-manager awareness to `NodeBase` so pending link selections can intercept pointer events before drag/toggle handlers run.
- Taught `LinkManager` to manage pending selections, consume node clicks, cancel on background clicks, and reuse the logic from icon interactions. Verified linking/unlinking via Playwright-driven browser checks.

## 2025-10-18
- Replaced the per-node ➕ control in the elements builder with a toolbar-level "Add Element" action that targets the most recently interacted element node.
- Added styling for the new toolbar button and taught `NodeBase` to remember the last interacted node so global actions attach to the expected parent.
- Cleared the completed todo entry to reflect that no outstanding tasks remain.

## 2025-10-19
- Refactored `NodeBase` UI: added dedicated expand toggles, full-text panels, growth badges, and upgraded marble styling with mock-glass gradients shared across modules.
- Reworked the project builder to drop canned child nodes, position descendants in an auto-pyramidal layout, and keep the root staged near the top of the workspace.
- Replaced the elements builder root with a fixed “Add Element” marble that launches a creation modal, spawns typed nodes, and drives connection-aware growth.
- Generalised zoom/pan and canvas bootstrapping via `util.enableZoomPan` + `ensureCanvas`, then adopted the helpers across project, elements, and main modules.
- Modules touched: `core/`, `modules/project/`, `modules/elements/`, `modules/main/`.

## 2025-10-20 11:22 UTC
- Files modified: `core/core.css`, `core/nodebase.js`, `core/util.js`, `modules/project/project.js`, `modules/elements/elements.js`, `modules/main/main.js`, `todo.md`.
- Completed tasks:
  - Added viewport focus helpers and initial transforms so each builder loads centered on its key nodes with a subtle animate-in.
  - Overhauled card hosting to pin panels to the triggering node’s upper-right corner with smart flipping and live repositioning while zooming/panning; drag calculations now refresh the active scale on every move.
  - Rebuilt the elements builder start state so the canvas is empty until the user creates an element; new nodes arrange in a centered grid and the viewport recenters on the first addition.
  - Refined marble styling/contrast to stay legible at varied zoom levels.
- Follow-ups: None noted.

## 2025-10-20 12:05 UTC
- Files modified: `server.js`.
- Completed tasks:
  - Served the main module directory as a static root so `style.css` and `main.js` resolve without 404s or incorrect MIME types.
  - Added a lightweight `/favicon.ico` handler to suppress unnecessary 404 errors in the browser console.
- Follow-ups: Consider providing a branded favicon asset in the future.

## 2025-10-22
- Replaced the React/ReactFlow-based main workspace with a standalone vanilla JS implementation so the UI loads without external CDNs.
- Implemented an SVG-based graph canvas with drag-to-position, edge management, and inspector/editing panels powered by native DOM state.
- Added console logging for successful MySQL schema initialisation and Neo4j connectivity checks, and gated startup on both services.

## 2025-10-23
- Investigated 500 errors hitting Neo4j and MySQL integrations.
- Added explicit read/write session helpers for Neo4j, ensuring write-mode sessions wrap all mutating queries including `/api/graph` and checkpoint operations.
- Normalised meta payloads by stringifying nested objects before persisting and parsing the values back when nodes are read, with matching hydration logic on the front-end.
- Hardened LIMIT handling in message and summary SQL queries so parameters are numeric, and enriched the `/api/health` response with distinct MySQL/Neo4j statuses.

## 2025-10-24
- Files modified: `server.js`, `src/routes/api.js`, `src/utils/neo4jHelpers.js`, `src/utils/nodeVersions.js`, `src/db/mysql.js`, `src/utils/mysqlLogger.js`.
- Completed tasks:
  - Reworked Neo4j meta handling to persist JSON strings, merge partial updates in application code, and hydrate node payloads with parsed objects for downstream consumers.
  - Wrapped every MySQL query/execute call with structured logging, surfaced SQL + parameter context on 500 responses, and introduced a `/api/debug/db` endpoint for simple connectivity checks.
  - Added a reusable MySQL logging helper, updated schema initialisation and node version utilities to use it, and tightened LIMIT casting by interpolating validated integers into message/summary lookups.
- Follow-ups: None noted.
## 2025-10-23 18:24 UTC
- Files modified: `server.js`, `modules/hub/*`, `modules/main/main.js`, `modules/main/style.css`, `modules/project/project.html`, `modules/project/project.js`, `modules/elements/elements.html`, `modules/elements/elements.js`, `core/core.css`, `modules/hub/hub.css`, `modules/hub/hub.js`, `src/routes/api.js`, `src/db/mysql.js`.
- Completed tasks:
  - Restored a dedicated Main Hub with project creation, MySQL-backed project listings, persistent localStorage context, and builder navigation guarded behind project selection.
  - Added REST endpoints for listing, creating, and retrieving projects plus ensured schema creation for the `projects` table during MySQL bootstrap.
  - Updated builder UIs to surface active project name/ID, added "Back to Hub" navigation, and synced context labels across toolbars and the main graph workspace.
- Follow-ups: Consider adding project renaming/deletion flows and surfacing project metadata errors in the hub UI.
## 2025-10-24
- Files modified: `AGENTS.md`, `agent_history`, `core/core.css`, `core/nodebase.js`, `modules/common/api.js`, `modules/common/autosaveManager.js`, `modules/elements/ElementNode.js`, `modules/elements/LinkManager.js`, `modules/elements/elements.html`, `modules/elements/elements.js`, `modules/project/ProjectNode.js`, `modules/project/project.html`, `modules/project/project.js`.
- Completed tasks:
  - Implemented shared autosave infrastructure for project and elements builders with debounced PATCH `/api/node` updates, link persistence, and keepalive flushes on navigation and visibility changes.
  - Hooked builder UIs to POST `/api/checkpoints`, added Save Checkpoint controls, and wired status indicators without altering approved visuals.
  - Centralised builder metadata handling in `NodeBase`, ensured element/project node payloads serialise correctly, and documented the non-negotiable builder design rule in `AGENTS.md`.
- Follow-ups: Consider adding UI to restore checkpoints from within the hub and enriching error feedback for failed checkpoint or autosave operations.
## 2025-10-25
- Files modified: `AGENTS.md`, `agent_history`, `src/routes/api.js`.
- Completed tasks:
  - Added utility guidance requiring agents to maintain the Agent History log and preserve builder visuals, recording the update within `AGENTS.md`.
  - Enabled checkpoint creation without a custom name by generating timestamped labels server-side and capping length for database inserts.
  - Implemented a PATCH `/api/edge` endpoint and sanitised relationship payload handling so autosave can persist relationship note edits reliably.
- Follow-ups: Verify future work surfaces checkpoint creation errors gracefully in the UI now that backend defaults are in place.

## 2025-10-26
- Files modified: `core/core.css`, `modules/elements/ElementNode.js`, `modules/project/ProjectNode.js`, `modules/project/project.js`.
- Completed tasks:
  - Limited data cards to a viewport-friendly height and enabled internal scrolling while preserving the existing panel styling and animations.
  - Removed the unused full-text icon from element nodes to keep the icon tray aligned with supported actions.
  - Expanded project node data cards to mirror the elements builder metadata experience, including editable custom key/value pairs stored in `meta.projectData` with autosave integration.
  - Seeded new project nodes with default `projectData` so freshly created chapters inherit the enhanced metadata structure.
- Follow-ups: None noted.
## 2025-10-27
- Reviewed Neo4j relationship APIs, autosave link handling, and builder data-card structures to scope two-way linking between project nodes and element nodes.
- Outlined a plan to add a `GET /api/links` endpoint, share link indexes derived from `/api/graph`, and extend project/element data cards with linked-node lists plus add/remove controls that dispatch `builder:link-mutated` events.
- Noted follow-ups: implement the backend endpoint, shared link-state helper, UI sections, and adjust autosave listeners so new `project-elements` context propagates without being overwritten.

## 2025-10-27 18:46 UTC
- Files modified: `src/routes/api.js`, `modules/common/api.js`, `modules/project/ProjectNode.js`, `modules/project/project.js`, `modules/elements/ElementNode.js`, `modules/elements/elements.js`.
- Completed tasks:
  - Added `/api/links`, `/api/link` (POST), and `/api/link` (DELETE) endpoints that scope relationships by project, merge undirected `LINKS_TO` records, and return grouped link summaries for UI consumption.
  - Expanded shared API utilities with `fetchLinks`, `createLink`, and `deleteLink` helpers to keep builders aligned with existing request patterns.
  - Extended project data cards with a Linked Elements section that lists, adds, and removes element relationships using existing card styling and live refreshes.
  - Mirrored the functionality in elements data cards so linked project nodes can be reviewed and maintained from the elements builder with matching controls.
- Follow-ups: Consider refreshing available element/project indexes when new nodes are created after initial load so selectors stay in sync without a full reload.

## 2025-10-28
- Files modified: `src/routes/api.js`, `AGENTS.md`.
- Completed tasks:
  - Switched the `/api/links` fetch endpoint to use a write-capable Neo4j session so its backfilling `SET` clauses no longer trigger "write in read mode" errors.
  - Documented the resolved issue in `AGENTS.md` Agent History for future maintainers.
- Verification: Neo4j link creation and retrieval now proceed without read-only transaction failures.
## 2025-10-28 22:00 UTC
- Files modified: `core/nodebase.js`, `core/core.css`, `core/session.js`, `modules/common/api.js`, `AGENTS.md`, `agent_history`.
- Completed tasks:
  - Replaced the textarea-based discussion card with a chat transcript that streams history from `/api/messages`, formats AI/user roles, and keeps the existing card footprint.
  - Added a session helper to reuse stored builder sessions, optimistic message sending with immediate rendering, and resilient reloads to persist messages per node.
  - Styled the transcript, composer, and mock Action button to match the approved builder aesthetics while reserving the button for future AI-triggered commands.
- Verification: Manual code review only; UI wiring relies on the existing `/api/messages` endpoints and session creation logic.

## 2025-10-29
- Files modified: `src/memory/workingMemory.js`, `src/routes/api.js`, `agent.md`.
- Implemented an in-memory working memory layer that initialises per-session/node
  snapshots from Neo4j and MySQL, maintains indexes for fast updates, and exposes
  helpers for retrieving, updating, and clearing context.
- Hooked API routes to keep working memory in sync after node/edge mutations,
  message inserts, summary rollups, session focus changes, and checkpoint restores,
  so AI orchestration can pull a current context bundle before each prompt.
- Documented the working memory lifecycle and helper functions in `agent.md` for
  future maintainers.

## 2025-10-29
- Removed the Node.js working memory module and scrubbed API refresh hooks so the server no longer tracks in-process memory.
- Added a shared front-end working memory store with configurable settings, a viewer modal, and settings panel in the main builder.
- Wired the main, project, and elements builders to update the local working memory JSON in response to graph edits, node context changes, and messaging/summaries.
## 2025-10-30 14:30 UTC
- Files modified: `modules/main/main.js`, `agent.md`, `AGENTS.md`, `agent_history`.
- Completed tasks:
  - Refactored the Working Memory Settings panel to build controls once and update values in place, preventing focus loss while settings refresh.
  - Replaced `agent.md` with documentation that reflects the browser-managed working memory store, helper APIs, and builder integration patterns.
  - Logged the stability fix in `AGENTS.md` and this history file for future context.
## 2025-10-31 10:00 UTC
- Files modified: `core/nodebase.js`, `modules/common/workingMemory.js`, `modules/common/workingMemoryViewer.js`, `modules/main/main.js`, `modules/project/project.js`, `modules/elements/elements.js`.
- Completed tasks:
  - Simplified the working memory payload to strip layout/UI fields, retaining only ids, labels, and builder notes/project data across project structure and node context snapshots.
  - Added node-scoped working memory viewers with automatic active-node tracking in all builders, including toolbar entry points and session updates triggered by node selection.
  - Expanded the settings panel with auto-refresh configuration and a reset control backed by localStorage, keeping the browser-managed store authoritative.
- Verification: Manual testing not recorded.
## 2025-10-31 18:15 UTC
- Files modified: `mcp/index.js`, `server.js`, `AGENTS.md`, `agent_history`.
- Completed tasks:
  - Added an `/mcp` router that advertises tool schemas and executes graph/link mutations through existing Neo4j/MySQL helpers while scoping work to the project id embedded in working memory.
  - Normalised working-memory payload handling so every tool call returns a ready-to-use snapshot and transient thought updates stay ephemeral.
  - Documented the MCP interface inside `AGENTS.md` and updated both history logs to capture the new orchestration layer.
- Verification: Not run (infrastructure-only changes).

## 2025-11-01 09:30 UTC
- Files modified: `modules/common/workingMemory.js`, `modules/project/project.js`, `modules/elements/elements.js`, `modules/main/main.js`, `mcp/index.js`, `AGENTS.md`.
- Completed tasks:
  - Refactored working-memory builders to emit minimal `project_structure` nodes with `{id,label,type}` and moved all metadata into the active `node_context.meta` bundle.
  - Synced autosave and refresh flows to update only the active node’s metadata while reloading lightweight project structures, trimming autosave payloads.
  - Hardened client and MCP sanitisation so snapshots always match the documented schema, and documented the expectations in `AGENTS.md`.
- Verification: Manual reasoning only; no automated tests are present.
## 2025-11-02 11:00 UTC
- Files modified: `mcp/index.js`, `src/state/workingMemoryStore.js`, `agent_history`.
- Completed tasks:
  - Introduced a shared working-memory store in the main app runtime so MCP tools can read the latest snapshot without relying on request payloads.
  - Updated the `getWorkingMemory` tool to return the live snapshot and added a GET `/mcp/working-memory` endpoint for stateless fetches.
  - Ensured `updateWorkingMemory` persists updates to the shared store while keeping other MCP tools unchanged.
- Verification: Not run (infrastructure-only changes).
## 2025-11-03 12:00 UTC
- Files modified: `mcp/index.js`, `modules/common/workingMemory.js`, `modules/elements/elements.js`, `modules/project/project.js`.
- Completed tasks:
  - Taught the MCP working-memory tools to pull complete project and element graphs from Neo4j, normalising nodes with builder, children, and cross-graph link metadata before persisting snapshots.
  - Refreshed browser-side sanitisation, defaults, and node-scoped exports to support the new `project_graph`/`elements_graph` schema while keeping viewer behaviour intact.
  - Updated project and element builders to tag working-memory nodes with their originating builders for consistent downstream processing.
- Verification: Not run (no automated test suite provided).
## 2025-11-04 12:00 UTC
- Files modified: `mcp/index.js`, `src/db/mysql.js`, `agent_history`.
- Completed tasks:
  - Removed the server-side working-memory merge tool, added `sendMessage`/`updateWorkingHistory` MCP actions, and ensured calls persist chat entries and node summaries directly to SQL.
  - Extended the MySQL schema with a `message_type` column plus a `node_working_history` table so transcripts and working history can be stored deterministically.
  - Simplified `/mcp/working-memory` to return `null`, signalling that the browser maintains the snapshot while MCP responses remain stateless.
- Verification: Not run (infrastructure-only changes).

## 2025-11-05 10:30 UTC
- Files modified: `mcp/index.js`, `agent_history`.
- Completed tasks:
  - Required explicit role values in the `sendMessage` MCP tool schema so orchestration layers can tag transcripts with their originating agent roles.
  - Updated `runSendMessage` to validate and persist provided roles instead of inferring them from message types while keeping message type validation unchanged.
- Verification: Not run (no automated test suite available).

## 2025-11-06 14:00 UTC
- Files modified: `modules/common/workingMemory.js`, `modules/common/projectStructure.js`, `modules/main/main.js`, `modules/project/project.js`, `modules/elements/elements.js`, `agent_history`.
- Completed tasks:
  - Added deterministic graph comparison and merge logic to working-memory updates so project and element structures persist across builder interactions without being overwritten.
  - Introduced a shared project-structure builder that assembles full project and element graphs from Neo4j payloads and wired the main hub to emit unified `project_graph`/`elements_graph` snapshots.
  - Updated project and element builders to send scoped updates that augment the shared structure instead of replacing it, preventing node navigation from dropping unrelated graph data.
- Verification: Not run (no automated test suite available).
## 2025-11-09 12:00 UTC
- Files modified: `docs/neo4j-working-memory-report.md`, `agent_history`.
- Completed tasks:
  - Audited Neo4j graph routes, builder loaders, and working-memory helpers to map how project and element data flow from the database into browser-managed state.
  - Documented the schema, current reconstruction logic, and the causes of partial `project_structure` payloads across the Project and Elements builders.
  - Proposed a unified loading strategy, refresh triggers, and consistency safeguards so working memory always carries both hierarchical and relational graphs.
- Verification: Not run (documentation-only change).

## 2025-11-10 11:00 UTC
- Files modified: `modules/common/workingMemory.js`, `mcp/index.js`, `agent_history`.
- Completed tasks:
  - Added a persistent per-project cache for unified Neo4j graph snapshots so working memory keeps both project and element slices when switching builders.
  - Hydrated builder initialisation from the cached structure and taught project-structure writes to backfill missing graphs with the last known data before persisting updates.
  - Updated the MCP `getWorkingMemory` tool to reload the latest project structure directly from Neo4j, guaranteeing parity with the browser snapshot for orchestration clients.
- Verification: Not run (no automated test suite available).

## 2025-11-12 09:30 UTC
- Files modified: `src/db/mysql.js`, `src/utils/workingMemorySchema.js`, `src/utils/workingMemoryStore.js`, `src/routes/api.js`, `mcp/index.js`, `modules/common/workingMemory.js`, `agent.md`, `readme`, `docs/neo4j-working-memory-report.md` (removed).
- Completed tasks:
  - Introduced a modular MySQL-backed working-memory store with per-part persistence and schema helpers so session, structure, context, history, messages, and config can be loaded and updated independently.
  - Exposed `/api/working-memory` endpoints plus MCP integrations that compose snapshots from SQL, refresh empty structures from Neo4j, and keep message/working-history parts in sync with tool activity.
  - Rebuilt the browser working-memory module to hydrate from the new backend, drop the legacy localStorage cache, and stream part-specific updates without clobbering other builders.
- Verification: Not run (no automated test suite available).
## 2025-11-16 14:20 UTC
- Files modified: `modules/common/workingMemory.js`, `src/utils/workingMemorySchema.js`, `src/utils/workingMemoryStore.js`.
- Completed tasks:
  - Added scope-aware project-structure updates in the browser working-memory store so project and element graphs merge instead of overwriting each other when builders save partial data.
  - Extended the shared schema helpers with intent detection and merge utilities that preserve untouched graphs while sanitising project-structure payloads.
  - Taught the MySQL persistence layer to hydrate existing project-structure slices before writes, ensuring partial PATCH requests combine with the stored snapshot rather than wiping peer data.
- Verification: Not run (no automated test suite available).
## 2025-11-18 10:30 UTC
- Files modified: `agent.md`, `mcp/index.js`, `modules/common/projectStructureService.js`, `modules/common/workingMemory.js`, `modules/main/main.js`, `src/utils/workingMemorySchema.js`, `src/utils/workingMemoryStore.js`.
- Completed tasks:
  - Split project and element working-memory persistence into dedicated `project_graph` and `elements_graph` parts while keeping `project_structure` as a derived composite in the shared schema helpers.
  - Simplified the MySQL store so each graph write replaces its JSON payload directly and legacy `project_structure` saves are fanned out to the new parts for backward compatibility.
  - Updated the browser working-memory store, project structure service, main builder, and MCP integration to use graph-specific setters, preventing builder switches from overwriting unrelated graph data.
- Verification: Not run (no automated test suite available).
## 2025-11-20 09:00 UTC
- Files modified: `src/utils/workingMemoryStore.js`.
- Completed tasks:
  - Ensured the working-memory store always recognises the split `project_graph` and `elements_graph` parts and hydrates a merged `project_structure` snapshot during reads.
  - Persisted the combined `project_structure` alongside its split counterparts when saving derived data to keep legacy consumers in sync.
- Verification: Not run (no automated test suite available).
## 2025-11-21 10:00 UTC
- Files modified: `modules/common/workingMemory.js`, `agent_history`.
- Completed tasks:
  - Hardened browser working-memory merges so project and element graph slices persist across partial updates by introducing fallback-aware sanitisation and targeted graph-part updates.
  - Added non-destructive project-structure visibility handling that preserves hidden graphs while config toggles disable the section.
  - Synced working-memory loads with the new split graph persistence, ensuring backend partial responses merge with the existing snapshot instead of wiping sibling graphs.
- Verification: Not run (no automated test suite available).
## 2025-11-22 13:45 UTC
- Files modified: `modules/common/projectStructureService.js`.
- Completed tasks:
  - Split the cached project structure into independent project and element graph slices with per-project promises to avoid cross-project races.
  - Ensured sync operations respect visibility settings, update working memory graphs conditionally, and preserve existing data on partial refreshes.
  - Added debug logging for single-graph updates and guarded sanitisation so partial backend responses merge safely with cached snapshots.
- Verification: Not run (no automated test suite available).

## 2025-11-23 11:30 UTC
- Files modified: `modules/common/projectStructure.js`, `agent_history`.
- Completed tasks:
  - Added a deterministic builder classifier and isolated cross-graph link tracking so project and element graphs stay independent when rebuilding structures.
  - Limited edge routing to single-graph writes while recording project↔element connections separately, preventing cross-link mutations from overwriting element graphs.
- Verification: Not run (no automated test suite available).

## 2025-11-24 12:00 UTC
- Files modified: `AGENTS.md`, `agent_history`, `modules/common/autosaveManager.js`, `src/routes/api.js`.
- Completed tasks:
  - Updated the autosave manager to send granular `metaUpdates` payloads and avoid server-side meta replacements when persisting nodes.
  - Added a deep-merge helper for node meta updates and conflict detection that blocks replacements dropping project or element metadata.
  - Ensured meta updates continue to refresh local node state with server responses while skipping empty PATCH requests.
- Verification: Not run (no automated test suite available).
## 2025-11-26 11:30 UTC
- Files modified: `modules/common/api.js`, `modules/common/projectStructureService.js`, `modules/project/project.js`, `modules/elements/elements.js`, `src/routes/api.js`, `src/utils/projectStructure.js`.
- Completed tasks:
  - Added a shared server-side graph-structure builder and extended `/api/graph` plus a new `/api/graph/:projectId` route to return precomputed project and element subgraphs alongside raw nodes/edges.
  - Updated the front-end project and elements builders to hydrate working memory immediately from the full graph response, eliminating the late refresh that previously wiped state when switching surfaces.
  - Taught the project-structure service to accept prebuilt snapshots, reuse cached data, and avoid redundant fetches while still supporting rebuilds after structural mutations.
- Verification: Not run (no automated test suite available).

## 2025-11-27 16:30 UTC
- Files modified: `modules/common/api.js`, `modules/common/messagesStore.js`, `modules/common/workingMemory.js`, `modules/main/main.js`, `src/routes/api.js`, `src/utils/workingMemorySchema.js`, `src/utils/workingMemoryStore.js`.
- Completed tasks:
  - Stopped persisting full message transcripts in working memory by introducing metadata-only storage (`messages_meta`), normalising helpers, and routing writes through the updated schema/store utilities.
  - Extended `/api/messages` to validate role/type enums, serve ascending pagination with cursors, and include total/filtered counts alongside the latest user message in the response payload.
  - Rebuilt the main module’s message flow around a dedicated API-backed messages store so UI rendering and working-memory syncs consume server-sourced transcripts and metadata consistently.
- Verification: Not run (manual reasoning only).
## 2025-11-27 18:00 UTC
- Files modified: `modules/common/messagesStore.js`, `modules/main/main.js`, `src/routes/api.js`, `src/utils/validators.js`.
- Completed tasks:
  - Hardened the `/api/messages` payload validation with a reusable helper, ensuring session, role, message type, and content are sanitised before inserting.
  - Updated message persistence to record explicit `message_type` and `created_at` values in column order aligned with the new bindings.
  - Normalised builder message flows so chat payloads preserve their `message_type` when sending, caching, and syncing into working memory.
- Verification: Not run (database services unavailable in the execution environment).
## 2025-11-27 22:00 UTC
- Files modified: `modules/common/api.js`, `modules/common/messagesStore.js`, `src/routes/api.js`.
- Completed tasks:
  - Normalised `/api/messages` query parameters to guard against invalid cursors, limits, and node identifiers while keeping SQL placeholder counts aligned with supplied parameters.
  - Updated the client API wrapper and shared messages store so cursors are treated as finite numbers, preventing accidental string values from reaching the server.
  - Ensured pagination state persists with numeric cursors and only appends SQL cursor clauses when corresponding parameters are bound.
- Verification: `npm start` *(fails: requires MySQL at localhost:3306)*.
