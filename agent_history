## 2024-05-12
- Reviewed drag behaviour for node marbles. Child nodes were realigned by the parent's automatic layout after pointer release, which snapped them back to their default orbit.
- Added a `manualPosition` flag to `NodeBase` instances so that once a node is dragged it retains its dropped coordinates. Automatic layout now skips nodes flagged as manually positioned while still arranging the remaining nodes.
- No automated tests are present in the project; behaviour verified by code inspection only. Future iterations should consider adding interaction tests for drag-and-drop flows if the runtime environment allows.

## 2024-05-13
- Linking UI was non-functional: clicking a node's link icon did not create connections and no relationship handles rendered.
- Added a shared node registry plus link-manager awareness to `NodeBase` so pending link selections can intercept pointer events before drag/toggle handlers run.
- Taught `LinkManager` to manage pending selections, consume node clicks, cancel on background clicks, and reuse the logic from icon interactions. Verified linking/unlinking via Playwright-driven browser checks.

## 2025-10-18
- Replaced the per-node ➕ control in the elements builder with a toolbar-level "Add Element" action that targets the most recently interacted element node.
- Added styling for the new toolbar button and taught `NodeBase` to remember the last interacted node so global actions attach to the expected parent.
- Cleared the completed todo entry to reflect that no outstanding tasks remain.

## 2025-10-19
- Refactored `NodeBase` UI: added dedicated expand toggles, full-text panels, growth badges, and upgraded marble styling with mock-glass gradients shared across modules.
- Reworked the project builder to drop canned child nodes, position descendants in an auto-pyramidal layout, and keep the root staged near the top of the workspace.
- Replaced the elements builder root with a fixed “Add Element” marble that launches a creation modal, spawns typed nodes, and drives connection-aware growth.
- Generalised zoom/pan and canvas bootstrapping via `util.enableZoomPan` + `ensureCanvas`, then adopted the helpers across project, elements, and main modules.
- Modules touched: `core/`, `modules/project/`, `modules/elements/`, `modules/main/`.

## 2025-10-20 11:22 UTC
- Files modified: `core/core.css`, `core/nodebase.js`, `core/util.js`, `modules/project/project.js`, `modules/elements/elements.js`, `modules/main/main.js`, `todo.md`.
- Completed tasks:
  - Added viewport focus helpers and initial transforms so each builder loads centered on its key nodes with a subtle animate-in.
  - Overhauled card hosting to pin panels to the triggering node’s upper-right corner with smart flipping and live repositioning while zooming/panning; drag calculations now refresh the active scale on every move.
  - Rebuilt the elements builder start state so the canvas is empty until the user creates an element; new nodes arrange in a centered grid and the viewport recenters on the first addition.
  - Refined marble styling/contrast to stay legible at varied zoom levels.
- Follow-ups: None noted.

## 2025-10-20 12:05 UTC
- Files modified: `server.js`.
- Completed tasks:
  - Served the main module directory as a static root so `style.css` and `main.js` resolve without 404s or incorrect MIME types.
  - Added a lightweight `/favicon.ico` handler to suppress unnecessary 404 errors in the browser console.
- Follow-ups: Consider providing a branded favicon asset in the future.

## 2025-10-22
- Replaced the React/ReactFlow-based main workspace with a standalone vanilla JS implementation so the UI loads without external CDNs.
- Implemented an SVG-based graph canvas with drag-to-position, edge management, and inspector/editing panels powered by native DOM state.
- Added console logging for successful MySQL schema initialisation and Neo4j connectivity checks, and gated startup on both services.

## 2025-10-23
- Investigated 500 errors hitting Neo4j and MySQL integrations.
- Added explicit read/write session helpers for Neo4j, ensuring write-mode sessions wrap all mutating queries including `/api/graph` and checkpoint operations.
- Normalised meta payloads by stringifying nested objects before persisting and parsing the values back when nodes are read, with matching hydration logic on the front-end.
- Hardened LIMIT handling in message and summary SQL queries so parameters are numeric, and enriched the `/api/health` response with distinct MySQL/Neo4j statuses.

## 2025-10-24
- Files modified: `server.js`, `src/routes/api.js`, `src/utils/neo4jHelpers.js`, `src/utils/nodeVersions.js`, `src/db/mysql.js`, `src/utils/mysqlLogger.js`.
- Completed tasks:
  - Reworked Neo4j meta handling to persist JSON strings, merge partial updates in application code, and hydrate node payloads with parsed objects for downstream consumers.
  - Wrapped every MySQL query/execute call with structured logging, surfaced SQL + parameter context on 500 responses, and introduced a `/api/debug/db` endpoint for simple connectivity checks.
  - Added a reusable MySQL logging helper, updated schema initialisation and node version utilities to use it, and tightened LIMIT casting by interpolating validated integers into message/summary lookups.
- Follow-ups: None noted.
## 2025-10-23 18:24 UTC
- Files modified: `server.js`, `modules/hub/*`, `modules/main/main.js`, `modules/main/style.css`, `modules/project/project.html`, `modules/project/project.js`, `modules/elements/elements.html`, `modules/elements/elements.js`, `core/core.css`, `modules/hub/hub.css`, `modules/hub/hub.js`, `src/routes/api.js`, `src/db/mysql.js`.
- Completed tasks:
  - Restored a dedicated Main Hub with project creation, MySQL-backed project listings, persistent localStorage context, and builder navigation guarded behind project selection.
  - Added REST endpoints for listing, creating, and retrieving projects plus ensured schema creation for the `projects` table during MySQL bootstrap.
  - Updated builder UIs to surface active project name/ID, added "Back to Hub" navigation, and synced context labels across toolbars and the main graph workspace.
- Follow-ups: Consider adding project renaming/deletion flows and surfacing project metadata errors in the hub UI.
## 2025-10-24
- Files modified: `AGENTS.md`, `agent_history`, `core/core.css`, `core/nodebase.js`, `modules/common/api.js`, `modules/common/autosaveManager.js`, `modules/elements/ElementNode.js`, `modules/elements/LinkManager.js`, `modules/elements/elements.html`, `modules/elements/elements.js`, `modules/project/ProjectNode.js`, `modules/project/project.html`, `modules/project/project.js`.
- Completed tasks:
  - Implemented shared autosave infrastructure for project and elements builders with debounced PATCH `/api/node` updates, link persistence, and keepalive flushes on navigation and visibility changes.
  - Hooked builder UIs to POST `/api/checkpoints`, added Save Checkpoint controls, and wired status indicators without altering approved visuals.
  - Centralised builder metadata handling in `NodeBase`, ensured element/project node payloads serialise correctly, and documented the non-negotiable builder design rule in `AGENTS.md`.
- Follow-ups: Consider adding UI to restore checkpoints from within the hub and enriching error feedback for failed checkpoint or autosave operations.
## 2025-10-25
- Files modified: `AGENTS.md`, `agent_history`, `src/routes/api.js`.
- Completed tasks:
  - Added utility guidance requiring agents to maintain the Agent History log and preserve builder visuals, recording the update within `AGENTS.md`.
  - Enabled checkpoint creation without a custom name by generating timestamped labels server-side and capping length for database inserts.
  - Implemented a PATCH `/api/edge` endpoint and sanitised relationship payload handling so autosave can persist relationship note edits reliably.
- Follow-ups: Verify future work surfaces checkpoint creation errors gracefully in the UI now that backend defaults are in place.
